/*
게임 맵의 상태 maps가 매개변수로 주어질 때, 캐릭터가 상대 팀 진영에 도착하기 위해서 지나가야 하는 칸의 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요.
단, 상대 팀 진영에 도착할 수 없을 때는 -1을 return 해주세요.

제한사항
maps는 n x m 크기의 게임 맵의 상태가 들어있는 2차원 배열로, n과 m은 각각 1 이상 100 이하의 자연수입니다.
n과 m은 서로 같을 수도, 다를 수도 있지만, n과 m이 모두 1인 경우는 입력으로 주어지지 않습니다.
maps는 0과 1로만 이루어져 있으며, 0은 벽이 있는 자리, 1은 벽이 없는 자리를 나타냅니다.
처음에 캐릭터는 게임 맵의 좌측 상단인 (1, 1) 위치에 있으며, 상대방 진영은 게임 맵의 우측 하단인 (n, m) 위치에 있습니다.
입출력 예
maps	answer
[[1,0,1,1,1],[1,0,1,0,1],[1,0,1,1,1],[1,1,1,0,1],[0,0,0,0,1]]	11
[[1,0,1,1,1],[1,0,1,0,1],[1,0,1,1,1],[1,1,1,0,0],[0,0,0,0,1]]	-1
입출력 예 설명
입출력 예 #1
주어진 데이터는 다음과 같습니다.

캐릭터가 적 팀의 진영까지 이동하는 가장 빠른 길은 다음 그림과 같습니다.

따라서 총 11칸을 캐릭터가 지나갔으므로 11을 return 하면 됩니다.

입출력 예 #2
문제의 예시와 같으며, 상대 팀 진영에 도달할 방법이 없습니다. 따라서 -1을 return 합니다.
 */

function solution(maps) {
  // 지도의 크기
  const Y = maps.length;
  const X = maps[0].length;

  // 방문한 좌표 표시 지도
  const visits = Array(Y)
    .fill()
    .map((_) => Array(X).fill(0));

  // bfs 시작
  // [0, 0]에서 시작 - 최단거리 1
  visits[0][0] = 1;
  // queue에 [0,0]과 최단거리 1 추가
  const queue = [[0, 0, 1]];
  // 인접 자표 배열 (상, 우, 하, 좌)
  const dy = [-1, 0, 1, 0];
  const dx = [0, 1, 0, -1];

  // queue가 빌 때 까지 (모든 경로를 탐색)
  while (queue.length) {
    // queue에서 좌표 하나를 뽑아옴
    const [y, x, move] = queue.shift();

    // 인접 좌표 배열 (상, 우, 하, 좌) 순회
    for (let i = 0; i < dx.length; i++) {
      // 인접 좌표
      const [ny, nx] = [y + dy[i], x + dx[i]];

      // 인접 좌표가 지도 범위 안에 있고
      if (ny >= 0 && nx >= 0 && ny < Y && nx < X) {
        // 지도에 1로 표시되어 있고 방문한 좌표가 아니면
        if (maps[ny][nx] === 1 && visits[ny][nx] === 0) {
          // 방문한 좌표에 최단 거리 표시
          visits[ny][nx] = move + 1;
          // queue에 탐색 좌표 추가
          queue.push([ny, nx, move + 1]);

          // 탐색 좌표가 도착 지점이면, 최단거리 리턴
          if (ny === Y - 1 && nx === X - 1) return move + 1;
        }
      }
    }
  }

  // 모든 경로를 탐색한 후, 도착 지점에 도달하지 못하면 -1 리턴
  return -1;
}

let output1 = solution([
  [1, 0, 1, 1, 1],
  [1, 0, 1, 0, 1],
  [1, 0, 1, 1, 1],
  [1, 1, 1, 0, 1],
  [0, 0, 0, 0, 1],
]); // -> 11
console.log(output1);

let output2 = solution([
  [1, 0, 1, 1, 1],
  [1, 0, 1, 0, 1],
  [1, 0, 1, 1, 1],
  [1, 1, 1, 0, 0],
  [0, 0, 0, 0, 1],
]); // -> -1
console.log(output2);
