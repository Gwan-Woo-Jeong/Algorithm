/*
최대공약수와 최소공배수

문제 설명
두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

제한 사항
두 수는 1이상 1000000이하의 자연수입니다.

입출력 예
n	m	return
3	12	[3, 12]
2	5	[1, 10]

입출력 예 설명
입출력 예 #1
위의 설명과 같습니다.

입출력 예 #2
자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.
*/

function solution(n, m) {
    const GCD = (a, b) => {
        // a, b 를 서로를 나눈다.만약 나누어진다면 b가 최대공약수이다.(a > b이다.)
        // 만약 서로가 나누어지지 않는다면 b와 a % b(a를 b로 나눈 나머지) 다시 나눈다.
        // 서로가 나누어진다면 a % b가 최대공약수이다.만약 나누어지지 않는다면 다시 위 방법을 반복한다.
        if (b === 0) return a;
        return GCD(b, a % b);
    }
    // 최소공배수는 두 수를 곱하여 최대공약수로 나눈 수다.
    const LCM = (a, b) => (a * b) / GCD(a, b);
    return [GCD(n, m), LCM(n, m)];
}

let output1 = solution(3, 12); // -> [3, 12]
console.log(output1);

let output2 = solution(2, 5); // -> [1, 10]
console.log(output2);